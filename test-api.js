// –¢–µ—Å—Ç API —Ñ–æ—Ä–º—ã —Å–≤–∞–¥–µ–±–Ω–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
const fetch = require('node-fetch');

async function testAPI() {
    const baseURL = 'https://wedding-invitation-backend-lj0d.onrender.com';
    
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Wedding Invitation API\n');
    
    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ health check
    console.log('1. üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞...');
    try {
        const healthResponse = await fetch(`${baseURL}/api/health`);
        const healthData = await healthResponse.json();
        console.log('   ‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç:', healthData.status);
        console.log('   ‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:', Math.floor(healthData.uptime), '—Å–µ–∫—É–Ω–¥');
    } catch (error) {
        console.log('   ‚ùå –û—à–∏–±–∫–∞ health check:', error.message);
        return;
    }
    
    // 2. –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–æ—Ä–º
    console.log('\n2. üìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–æ—Ä–º...');
    
    const testCases = [
        {
            name: '–¢–µ—Å—Ç –≤–∞–ª–∏–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞',
            data: {
                name: '–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞',
                attendance: '–ë—É–¥—É –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å',
                wishes: '–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å —ç—Ç–∏–º –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–º –¥–Ω–µ–º!'
            },
            expectedStatus: 200
        },
        {
            name: '–¢–µ—Å—Ç —Å –∫–æ—Ä–æ—Ç–∫–∏–º –∏–º–µ–Ω–µ–º',
            data: {
                name: '–ê',
                attendance: '–ë—É–¥—É –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å',
                wishes: '–¢–µ—Å—Ç'
            },
            expectedStatus: 400
        },
        {
            name: '–¢–µ—Å—Ç —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º',
            data: {
                name: '–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤',
                attendance: '–í–æ–∑–º–æ–∂–Ω–æ –ø—Ä–∏–¥—É',
                wishes: '–¢–µ—Å—Ç'
            },
            expectedStatus: 400
        },
        {
            name: '–¢–µ—Å—Ç —Å –∏–º–µ–Ω–µ–º —Å –∞–∫—Ü–µ–Ω—Ç–æ–º',
            data: {
                name: 'Jos√© Garc√≠a',
                attendance: '–ù–µ —Å–º–æ–≥—É –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å',
                wishes: '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —Å–º–æ–≥—É –±—ã—Ç—å'
            },
            expectedStatus: 200
        }
    ];
    
    for (const testCase of testCases) {
        console.log(`\n   üî∏ ${testCase.name}`);
        
        try {
            const response = await fetch(`${baseURL}/api/submit-form`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'x-test-mode': 'true'  // –í–∫–ª—é—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
                },
                body: JSON.stringify(testCase.data)
            });
            
            const responseData = await response.json();
            
            if (response.status === testCase.expectedStatus) {
                console.log(`     ‚úÖ –°—Ç–∞—Ç—É—Å: ${response.status} (–æ–∂–∏–¥–∞–ª—Å—è: ${testCase.expectedStatus})`);
                if (responseData.success) {
                    console.log('     ‚úÖ –£—Å–ø–µ—à–Ω–æ:', responseData.message);
                } else if (responseData.errors) {
                    console.log('     ‚úÖ –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (–æ–∂–∏–¥–∞–ª–æ—Å—å):', responseData.errors.map(e => e.msg).join(', '));
                }
            } else {
                console.log(`     ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${response.status} (–æ–∂–∏–¥–∞–ª—Å—è: ${testCase.expectedStatus})`);
                console.log('     üìÑ –û—Ç–≤–µ—Ç:', responseData);
            }
            
        } catch (error) {
            console.log(`     ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`);
        }
        
        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 1000));
    }
    
    console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
testAPI().catch(console.error);